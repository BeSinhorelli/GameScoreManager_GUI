/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import javax.swing.*;
import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import Classes.Score;
import java.util.ArrayList;
import Classes.Jogo;
import Classes.Player;
import Classes.ScorePlayer;
import Classes.ScoreJogo;
import Classes.ScorePlayerJogo;
import DAO.ErpDAOException;
import DAO.JogoDAO;
import DAO.ScoreDAO;
import DAO.ScoreJogoDAO;
import DAO.ScorePlayerDAO;
import DAO.ScorePlayerJogoDAO;
import DAO.playerDAO;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import javax.swing.JOptionPane;
import javax.swing.JFrame;
import java.text.SimpleDateFormat;
import javax.swing.JFileChooser;

public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        setResizable(false); //sem tela cheia
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Bem-Vindo(a)");

        jToggleButton1.setText("Sair");
        jToggleButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton1MouseClicked(evt);
            }
        });

        jToggleButton2.setText("Gerar relatório PDF ");
        jToggleButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton2MouseClicked(evt);
            }
        });

        jMenu1.setText("Jogo");

        jMenuItem1.setText("Inserir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Alterar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Excluir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Player");
        jMenu3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jMenuItem6.setText("Inserir");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem8.setText("Excluir");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem12.setText("alterar");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Score");

        jMenuItem9.setText("Inserir");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem11.setText("Excluir");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem13.setText("Alterar");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem13);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Listar");

        jMenuItem4.setText("listar players");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem7.setText("listar games");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem7);

        jMenuItem10.setText("listar score");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Ferramentas");
        jMenu6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jMenu6.setVerifyInputWhenFocusTarget(false);

        jMenuItem5.setText("Configurações");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem5);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(125, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        JFrame Ins = new insereplayer();
        Ins.setLocationRelativeTo(rootPane);
        Ins.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFrame Ins = new insereJogo();
        Ins.setLocationRelativeTo(rootPane);
        Ins.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        JFrame Exclui = new excluirScore();
        Exclui.setLocationRelativeTo(rootPane);
        Exclui.setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        JFrame Marcar = new InserirScore();
        Marcar.setLocationRelativeTo(rootPane);
        Marcar.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFrame Exclui = new ExcluirJogo();
        Exclui.setLocationRelativeTo(rootPane);
        Exclui.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFrame Altera = new AlteraJogo();
        Altera.setLocationRelativeTo(rootPane);
        Altera.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        JFrame Exclui = new ExcluirPlayer();
        Exclui.setLocationRelativeTo(rootPane);
        Exclui.setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JFrame Lista = new ListarPlayer();
        Lista.setLocationRelativeTo(rootPane);
        Lista.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        JFrame Lista = new ListarJogo();
        Lista.setLocationRelativeTo(rootPane);
        Lista.setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jToggleButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton1MouseClicked
        dispose();
    }//GEN-LAST:event_jToggleButton1MouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        JFrame Conf = new Configuracoes();
        Conf.setLocationRelativeTo(rootPane);
        Conf.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        JFrame Lista = new ListarTudo();
        Lista.setLocationRelativeTo(rootPane);
        Lista.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        JFrame Lista = new AlteraPlayer();
        Lista.setLocationRelativeTo(rootPane);
        Lista.setVisible(true);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        JFrame Lista = new AlteraScore2();
        Lista.setLocationRelativeTo(rootPane);
        Lista.setVisible(true);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jToggleButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton2MouseClicked

        try {
            // Solicitar nome do arquivo
            String nomeArquivo = JOptionPane.showInputDialog(null, "Digite o nome do relatório PDF:");
            if (nomeArquivo == null || nomeArquivo.trim().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Erro: nome do arquivo inválido!");
                return;
            }

            // Selecionar diretório para salvar
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Escolha o diretório para salvar o PDF");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int userSelection = fileChooser.showSaveDialog(null);
            if (userSelection != JFileChooser.APPROVE_OPTION) {
                JOptionPane.showMessageDialog(null, "Operação cancelada pelo usuário.");
                return;
            }

            File diretorio = fileChooser.getSelectedFile();
            String caminhoCompleto = diretorio.getAbsolutePath() + File.separator + nomeArquivo + ".pdf";

            // Criar documento PDF
            Document document = new Document(PageSize.A4);
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(caminhoCompleto));
            
            // Adicionar cabeçalho e rodapé personalizados
            writer.setPageEvent(new HeaderFooterPageEvent());
            
            document.open();

            // Configurações de estilo
            Font tituloFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD, BaseColor.DARK_GRAY);
            Font subtituloFont = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD, BaseColor.DARK_GRAY);
            Font cabecalhoFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);
            Font textoFont = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            Font pequenoFont = new Font(Font.FontFamily.HELVETICA, 8, Font.ITALIC, BaseColor.GRAY);

            // Título principal
            Paragraph titulo = new Paragraph("RELATÓRIO COMPLETO DO SISTEMA", tituloFont);
            titulo.setAlignment(Element.ALIGN_CENTER);
            titulo.setSpacingAfter(20);
            document.add(titulo);

            // Data de geração
            Paragraph dataGeracao = new Paragraph(
                "Gerado em: " + new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date()), 
                pequenoFont
            );
            dataGeracao.setAlignment(Element.ALIGN_CENTER);
            dataGeracao.setSpacingAfter(30);
            document.add(dataGeracao);

            // =============== PLAYERS ===============
            document.add(criarSecao("JOGADORES CADASTRADOS", subtituloFont));
            
            playerDAO playerDao = new playerDAO();
            ArrayList<Player> jogadores;
            try {
                jogadores = playerDao.listar();
            } catch (Exception e) {
                jogadores = new ArrayList<>();
                document.add(new Paragraph("Não foi possível carregar os jogadores.\nErro: " + e.getMessage(), textoFont));
            }

            if (jogadores.isEmpty()) {
                document.add(new Paragraph("Nenhum jogador encontrado.", textoFont));
            } else {
                // Tabela de players
                PdfPTable tabelaPlayers = new PdfPTable(4);
                tabelaPlayers.setWidthPercentage(100);
                tabelaPlayers.setSpacingBefore(10);
                tabelaPlayers.setSpacingAfter(20);

                // Cabeçalho da tabela
                adicionarCelulaCabecalho(tabelaPlayers, "ID", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaPlayers, "Nickname", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaPlayers, "Plataforma", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaPlayers, "Email", cabecalhoFont);

                // Dados dos players
                for (Player player : jogadores) {
                    adicionarCelula(tabelaPlayers, String.valueOf(player.getId_player()), textoFont);
                    adicionarCelula(tabelaPlayers, player.getNickname(), textoFont);
                    adicionarCelula(tabelaPlayers, player.getPlataforma(), textoFont);
                    adicionarCelula(tabelaPlayers, player.getEmail(), textoFont);
                }

                document.add(tabelaPlayers);
                document.add(new Paragraph("Total de jogadores: " + jogadores.size(), pequenoFont));
            }

            // Quebra de página
            document.newPage();

            // =============== JOGOS ===============
            document.add(criarSecao("JOGOS CADASTRADOS", subtituloFont));
            
            JogoDAO jogoDao = new JogoDAO();
            ArrayList<Jogo> jogos;
            try {
                jogos = jogoDao.listar();
            } catch (Exception e) {
                jogos = new ArrayList<>();
                document.add(new Paragraph("Não foi possível carregar os jogos.\nErro: " + e.getMessage(), textoFont));
            }

            if (jogos.isEmpty()) {
                document.add(new Paragraph("Nenhum jogo encontrado.", textoFont));
            } else {
                // Tabela de jogos
                PdfPTable tabelaJogos = new PdfPTable(3);
                tabelaJogos.setWidthPercentage(100);
                tabelaJogos.setSpacingBefore(10);
                tabelaJogos.setSpacingAfter(20);

                adicionarCelulaCabecalho(tabelaJogos, "ID", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaJogos, "Nome do Jogo", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaJogos, "Tipo", cabecalhoFont);

                for (Jogo jogo : jogos) {
                    adicionarCelula(tabelaJogos, String.valueOf(jogo.getId_game()), textoFont);
                    adicionarCelula(tabelaJogos, jogo.getNome(), textoFont);
                    adicionarCelula(tabelaJogos, jogo.getTipo(), textoFont);
                }

                document.add(tabelaJogos);
                document.add(new Paragraph("Total de jogos: " + jogos.size(), pequenoFont));
            }

            // Quebra de página
            document.newPage();

            // =============== SCORES ===============
            document.add(criarSecao("SCORES REGISTRADOS", subtituloFont));
            
            ScorePlayerJogoDAO scoreDao = new ScorePlayerJogoDAO();
            ArrayList<ScorePlayerJogo> scores;
            try {
                scores = scoreDao.listarTodos();
            } catch (Exception e) {
                scores = new ArrayList<>();
                document.add(new Paragraph("Não foi possível carregar os scores.\nErro: " + e.getMessage(), textoFont));
            }

            if (scores.isEmpty()) {
                document.add(new Paragraph("Nenhum score encontrado.", textoFont));
            } else {
                // Tabela de scores
                PdfPTable tabelaScores = new PdfPTable(5);
                tabelaScores.setWidthPercentage(100);
                tabelaScores.setSpacingBefore(10);
                tabelaScores.setSpacingAfter(20);

                adicionarCelulaCabecalho(tabelaScores, "ID Score", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaScores, "ID Jogo", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaScores, "ID Player", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaScores, "Score", cabecalhoFont);
                adicionarCelulaCabecalho(tabelaScores, "Data", cabecalhoFont);

                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                for (ScorePlayerJogo score : scores) {
                    adicionarCelula(tabelaScores, String.valueOf(score.getId_score()), textoFont);
                    adicionarCelula(tabelaScores, String.valueOf(score.getId_game()), textoFont);
                    adicionarCelula(tabelaScores, String.valueOf(score.getId_player()), textoFont);
                    adicionarCelula(tabelaScores, String.valueOf(score.getScore()), textoFont);
                    
                    String dataFormatada = (score.getData() != null) ? 
                        dateFormat.format(score.getData()) : "N/A";
                    adicionarCelula(tabelaScores, dataFormatada, textoFont);
                }

                document.add(tabelaScores);
                document.add(new Paragraph("Total de scores: " + scores.size(), pequenoFont));
            }

            // Estatísticas finais
            Paragraph estatisticas = new Paragraph(
                "\n\nESTATÍSTICAS GERAIS:\n" +
                "• Total de Jogadores: " + (jogadores != null ? jogadores.size() : 0) + "\n" +
                "• Total de Jogos: " + (jogos != null ? jogos.size() : 0) + "\n" +
                "• Total de Scores: " + (scores != null ? scores.size() : 0),
                textoFont
            );
            document.add(estatisticas);

            document.close();

            JOptionPane.showMessageDialog(null, 
                "Relatório PDF gerado com sucesso!\n" +
                "Local: " + caminhoCompleto + "\n" +
                "Total de páginas: " + writer.getPageNumber());

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, 
                "Erro ao gerar o PDF: " + e.getMessage(), 
                "Erro", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    // Métodos auxiliares para formatação
    private Paragraph criarSecao(String titulo, Font font) {
        Paragraph secao = new Paragraph(titulo, font);
        secao.setSpacingBefore(20);
        secao.setSpacingAfter(10);
        return secao;
    }

    private void adicionarCelulaCabecalho(PdfPTable tabela, String texto, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(texto, font));
        cell.setBackgroundColor(BaseColor.DARK_GRAY);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPadding(5);
        tabela.addCell(cell);
    }

    private void adicionarCelula(PdfPTable tabela, String texto, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(texto, font));
        cell.setPadding(5);
        tabela.addCell(cell);
    }

    // Classe para cabeçalho e rodapé personalizados
    class HeaderFooterPageEvent extends PdfPageEventHelper {
        private PdfTemplate template;
        private Image logo;

        @Override
        public void onOpenDocument(PdfWriter writer, Document document) {
            template = writer.getDirectContent().createTemplate(30, 16);
            try {
                // Você pode adicionar um logo aqui se quiser
                // logo = Image.getInstance("path/to/logo.png");
                // logo.scaleToFit(100, 100);
            } catch (Exception e) {
                // Logo não encontrado, continua sem logo
            }
        }

        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            try {
                // Cabeçalho
                PdfPTable header = new PdfPTable(2);
                header.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin());
                header.setLockedWidth(true);

                if (logo != null) {
                    PdfPCell logoCell = new PdfPCell(logo, false);
                    logoCell.setBorder(Rectangle.NO_BORDER);
                    header.addCell(logoCell);
                } else {
                    header.addCell(new PdfPCell(new Phrase("")));
                }

                PdfPCell textCell = new PdfPCell(new Phrase("Sistema de Gerenciamento de Scores", 
                    new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD)));
                textCell.setBorder(Rectangle.NO_BORDER);
                textCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                header.addCell(textCell);

                header.writeSelectedRows(0, -1, document.leftMargin(), 
                    document.getPageSize().getHeight() - document.topMargin() + 20, 
                    writer.getDirectContent());

                // Rodapé
                PdfPTable footer = new PdfPTable(3);
                footer.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin());
                footer.setLockedWidth(true);

                // Data
                PdfPCell dateCell = new PdfPCell(new Phrase(
                    new SimpleDateFormat("dd/MM/yyyy").format(new Date()), 
                    new Font(Font.FontFamily.HELVETICA, 8)));
                dateCell.setBorder(Rectangle.NO_BORDER);
                footer.addCell(dateCell);

                // Número da página
                PdfPCell pageCell = new PdfPCell(new Phrase(
                    "Página " + writer.getPageNumber() + " de ", 
                    new Font(Font.FontFamily.HELVETICA, 8)));
                pageCell.setBorder(Rectangle.NO_BORDER);
                pageCell.setHorizontalAlignment(Element.ALIGN_CENTER);
                footer.addCell(pageCell);

                // Total de páginas
                PdfPCell totalPagesCell = new PdfPCell(Image.getInstance(template));
                totalPagesCell.setBorder(Rectangle.NO_BORDER);
                totalPagesCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                footer.addCell(totalPagesCell);

                footer.writeSelectedRows(0, -1, document.leftMargin(), 
                    document.bottomMargin() - 10, writer.getDirectContent());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        @Override
        public void onCloseDocument(PdfWriter writer, Document document) {
            // Atualizar o template com o número total de páginas
            ColumnText.showTextAligned(template, Element.ALIGN_LEFT, 
                new Phrase(String.valueOf(writer.getPageNumber() - 1), 
                new Font(Font.FontFamily.HELVETICA, 8)), 2, 2, 0);
        }

    }//GEN-LAST:event_jToggleButton2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Principal().setVisible(true);
                JFrame Janela = new Principal();
                Janela.setVisible(true);
                Janela.setLocationRelativeTo(null); //Centraliza a Janela
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables

}
